# CoreJava Notes -1 
## Introduction to Programming and Java 

### **Software**
-  It is a solution—an automated solution for real-world problems.
-  It is a set of programs used to develop applications according to business requirements.
### **Program**
-  A set of instructions given to the machine for a specific task.
### **Programming Language** 
-  The language used to write a set of instructions.
-  **Examples:** C, C++, Java, Python, C#, Ruby.
-  To execute the program, we need a platform.
### **Platform**
-  It is a place that runs (executes) a program.
-  It is a combination of software (OS) and hardware (microprocessor).
-  Without a platform, we cannot run the program.
---
### History of Programming Languages
-  C
    - In the 1970s, C was introduced.
    -  These were platform dependent and procedure or function-oriented.
    -  For example, a large company with 250 employees is working on a project and wants to communicate, it is impossible to work only with C language.
- C++
    -  In the 1980s, C++ was introduced.
    -  It is a object oriented and platform dependent
    -  Suppose people living in different countries work on the same project. Still, communication is not possible with C/C++, so to overcome this, Java was introduced.
-  Java
    -  Java is object-oriented (building applications in objects) and platform independent (meaning the application built on one platform can be executed on a different platform).
---
### Java
-  High-level, object-oriented programming language
-  Platform independent
-  Platforms Java can run on: Windows, Mac, Linux, Android
---
### Platform independent 
-    The code developed on one system can be executed on another system with a different operating system (as long as JVM is present). This is called platform independence.
---
### Class
-    A class is a `logical entity`; it gets life once an object is created
-    A class is a blueprint or master copy of an object.
-    A class is a `non-primitive data type`.
-    Without a class, we cannot create an object.
-    If any object is destroyed or modified, it does not affect any other object or the class itself.
-    By using a single class, we can create multiple similar objects.

#### How to create a class
```
class className {
    # Data Members
    # Methods
    # Nested Classes
    # Blocks
    # Constructors
}
```
#### Filename Rule
- For Java programs, the file name should match the class name.
- Example:
```
class Employee { }
// Filename: Employee.java
```
---
### Object
-    A physical entity
-    It is a real-world entity.
-    An instance of a class.
-    Each object has two aspects:
      1. States (Data Members/Variables)
         - Description / Information / Details of an object
         - Technically we call it as Data Memebers
      2. Behaviours (Methods)
         - Action perform by the object
         - Technically it as Methods
- 5 ways to create objects
  1. Using new keyword
  2. By using newInstance() of Constructor class
  3. By using clone()
  4. By using Class.forName().newInstance()
  5. By using deserialization
- **Note** : We are using new keyword to create the object
- ```
  # class Employee

    public static void main (String [] args) {

    Employee                 e1             =     new        Employee();

            ↑                ↑                      ↑            ↑
   Non-primitive     variable (reference)        keyword      construction class
    ```
  - To access properties inside the main method, use a reference variable with the dot (.) operator.
  - Using the new keyword creates an object in heap memory.
---
### Keywords
- These are predefined words in Java, always written in `lowercase`.
- Java is `case-sensitive` (e.g., class is different from CLASS).
#### **List of Java Keywords**
```bash
boolean, byte, char, double, float, short, void, int, long, while, boy, do, switch, break, continue, catch, default, else, try, catch, finally, class, abstract, extends, create, final, import, new, instance, of, private, interface, native, public, package, implements, protected, return, static, super, synchronized, this, throw, throws, transient, volatile
```
---
### Identifiers
- The naming component that gives unique names to Java members.

**Rules for Identifiers**
- Should not contain whitespace.
- Can contain numbers but must not start with a number.
- Cannot contain special characters except $ (dollar) and _ (underscore).
- Should not use any reserved keywords.
---
###  WORA (Write Once, Run Anywhere)
- Java follows a two-step process
1. **Compilation:** Checks the syntax. If correct, generates bytecode; else, shows error.
2. **Execution (using JVM)**: Interprets the bytecode.
#### Compilation Example:
```
class Employee { }
```
- Use javac Employee.java to compile, which generates a .class file with bytecode.
#### Bytecode
- Bytecode is not high-level nor low-level—it is intermediate language, platform independent.
- It is generated by the compiler and interpreted by the JVM.
- Stored in .class files.
---
### JVM – Java Virtual Machine
- Converts `bytecode into machine-level`
- jvm is a `platform dependent` i.e., windows jvm is different from mac jvm, each OS has its own JVM.
- JVM is a virtual machine or plaform(software only) that sites onn the actual platform
- JVM is an engine or environment for running or executing .class files.
-  As the name indicates, JVM is a `virtual machine`, not a physical component. It is a set of instructions written in `C language`.
- JVM is responsible for `allocating memory` in Java.

---

### SDK [ JDK - Java Development Kit]
```
JDK
 ├── Development Tools
 │     ├─ javac
 │     ├─ JavaP
 │     ├─ java cons
 │     └─ Java lib
 └── JRE
       ├─ lib
       ├─ API
       └── JVM
              └─ JIT 
```
#### **JDK**
- JDK is SDK (Software Development Kit). It contains necessary resources to `compile as well as to execute java` based application programs.
- JDK internally contains JRE.

#### ** JRE (Java Runtime Environment)**
- JRE is a runtime Environment which is required to `execute java applications or bytecode`.
- JRE can be downloaded separately.
-  Using JRE we can not develop Java program.

#### ** JIT Compiler (Just-In-Time Compiler)**
- It is a component of runtime Environment (JRE) which is used to `improve the performance` of a Java application
---
### Data Members: Variables and Constants
1. **Variables**
   - Place to store data or it is aname given to a memory location
   - Variable value/data is not fixed , can change value.
   - Must be declared with access modifier, data type, and optionally initialized with a value.
   ```
    int a = 40;      // Declaration & Initialization
    double b = 30.5; // Declaration & Initialization
    int c;           // Declaration only
    c = 40;          // Assignment
   ```

2. **Constant**
   - Fixed values
   - cannot change after assignment.
   - Declared using the final keyword.
   ```
   final double pi = 3.14;
    final String dob = "02/02";
   ```
---
### Access modifiers 
- Define the accessibility / visibility of Java members (classes, variables, methods)
1. public
   -  This is the highest visible access modifier
   -  we can access public members inside the class, outside the class, inside the package & outside the package.
   -  All the Java member can be public.
2. protected
   -  we can access protected members inside class, outside the class & inside package.
   -  For protected members want to access outside the package have to perform inheritance.
3. default
   - we can access default access modifier inside the class /outside the class & inside the package.
4. private
   - private members can be access with class
   - This is least visible access modifier.
   - **NOTE** : class can’t be private.
---
### Data Types
- It is a type of data which is assigned to the variable and also specifies the size of the data.
```
        Datatypes
       ├─ Primitive Data Types
       ├─ Non-Primitive Data Types
```
1. **Primitive Data Types**
   - In Java, we have inbuilt datatypes or predefined datatypes, we call it as primitive datatypes.
   - ```
        | Data Type | Size     | Default Value | Range              |
        |-----------|----------|----------------|-------------------|
        | byte      | 1 byte   | 0              | -128 to +127      |
        | short     | 2 bytes  | 0              | -32,768 to 32,767 |
        | int       | 4 bytes  | 0              | -2^31 to 2^31-1   |
        | long      | 8 bytes  | 0              | -2^63 to 2^63-1   |
        | float     | 4 bytes  | 0.0f           | ~±3.4e−38 to ±3.4e+38 |
        | double    | 8 bytes  | 0.0            | ~±1.7e−308 to ±1.7e+308 |
        | boolean   | 1 bit    | false          | true/false        |
        | char      | 2 bytes  | '\u0000'       | '\u0000' to '\uffff' |
     ```
   - If no value is assigned to a variable, it takes the default value.
  - ```
       Primitive Datatype
       ├─ Numeric Data
       ├─ Non-Numeric Data
       ```
    - **Numeric Data:** int, byte, short, long, float, double
    - **Non-Numeric Data:** char, boolean
2. Non-Primitive Data Types
- User-defined data types
- In Java, it is possible to create user-defined datatypes by using class and interfaces.
- Examples: String, Collections, Arrays etc--
- **NOTE** :   St5ring is the most commonly used non primitive data type

### String
- String is a predefined class in java.lang package,
- It is a sequence of characters enclosed within double quotes(" ").
- ```
  String s1 = "Deric";
  String s2 = "1234";
  ```
  ---
  ### Methods
- It is a set of instructions / block of code whic is used to perform specific task
- Syntax:
- ```
    [access_modifier] [static] return_type methodName([parameters]) {
    // method body
        [return data/ value];
    }
   ```
### Rules to perform Methods
- void, [return type] method does not return any value/data.
- Method can have only one return type.
- Method can have only one return statement.
- Return type & return statement must be have same data type.
- In return statement, we can return only one value.
- Return statement must be last executable statement inside a method.
- **Note:-**
   - If method wants to return multiple value, we can use array or collections.
   - Until the method invokes or call metods , metod won't get executed
   - By using object referenc3 with the dot(.) operator we can invokes method
---
### Parameters and Arguments
- Parameters
  - It is a place which holds the arguments
  - It is input given to the methods
- Arguments
  - It is a value given to the parameters
---
### Scanner Class (User Input)
- It is an built class whhich is present in java.util package
- Used to read input from the user.
- **Common Methods**
   - nextInt() – reads an int value.
   - nextLong() – reads a long value.
   - nextDouble() – reads a double value.
   - next() – reads a single token (word).
   - nextLine() – reads the entire line including spaces.
   - ```
     Scanner sc = new Scanner(System.in);

     String name = sc.nextLine();
     int age = sc.nextInt();
     long phone = sc.nextLong();
     double salary = sc.nextDouble();
     ```
     ---
